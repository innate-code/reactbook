// Для объявления списка свойств, принимаемых вашим компонентом, и их типов вы можете добавить в свои компоненты свойство propTypes (типы свойств). 
// Рассмотрим пример:

var Component = React.createClass({
	propTypes: {
		name: React.propTypes.string.isRequired,
	},
	render: function() {
		return React.DOM.span(null, "My name is" + this.props.name)
	}
});

// Свойство propTypes не обязательно использовать, но оно предоставляет два преимущества:
// 1 - вы заранее объявляете, какие свойства ожидает ваш компонент. 
// Пользователям вашего компонента не придется тщательно изучать исходный (потенциально весьма длинный) код функции render()
// , чтобы определить, какими свойствами можно воспользоваться для настройки компонента;

// 2 - React проводит проверку значений свойств в ходе выполнения программы
// , поэтому свою функцию render() можно создавать без лишних опасений (или чрезмерной подозрительности) насчет данных
// , получаемых вашими компонентами.

// Рассмотрим проверку в действии. Выражение name: React.PropTypes.string.isRequired явно просит для свойства name обязательное строковое значение. 
// Если вы забудете передать значение, в консоли появится предупреждение

ReactDOM.render(
	React.createElement(Component, {
		// name: "Denis"
	}),
	document.getElementById("app")
);

// Предупреждение также будет получено при предоставлении значения неверного типа, скажем целого числа

React.createElement(Component, {
	name: 123,
})

// Даст представление обо всех доступных свойствах PropTypes, которыми можно воспользоваться для объявления ваших ожиданий.


// Значения свойств, используемые по умолчанию.Когда ваши компоненты получают необязательные свойства, следует уделить особое внимание их работоспособности в том случае, когда свойства не объявляются. 
// Это неизбежно приводит к применению защитного шаблона, например:

var text = 'text' in this.props ? this.props.text:'';

// Избавиться от необходимости написания такого кода (сконцентрировавшись на более важных аспектах программы) можно, реализовав метод getDefaultProps():

var Component = React.createClass({
	propTypes: {
		firstName: React.PropTypes.string.isRequired,
		middleName: React.PropTypes.string,
		familyName: React.PropTypes.string.isRequired,
		address: React.PropTypes.string,
	},

	getDefaultProps:function(){
		return {
			middleName:'',
			address: 'n/a',
		};
	},
		return:function(){/* ... */}
});

// Как видите, getDefaultProps() возвращает объект, предоставляя допустимые значения для каждого необязательного свойства (из числа тех, для которых не указывается .isRequired).
