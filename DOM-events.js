// Во избежание путаницы насчет следующей строки необходимо кое-что пояснить:

onChange: this_textChange

// В целях повышения производительности, а также для удобства работы React использует собственную систему искусственно создаваемых событий. 
// Чтобы легче было разобраться в причинах этого, следует рассмотреть, как все происходит в подлинном мире DOM-модели.

// Чтобы выполнять какие-либо действия, очень удобно применять встроенные обработчики событий:

<button onclick = "doStuff">

// При всем удобстве и легкой узнаваемости (отслеживатель событий находится там же, где и пользовательский интерфейс) пользоваться слишком большим количеством разбросанных подобным образом отслеживателей событий крайне неэффективно. 
// Также трудно пользоваться на одной и той же кнопке более чем одним отслеживателем, особенно если эта кнопка является не вашим, а чьим-то «компонентом» или входит в другую библиотеку и вам не хочется туда внедряться и «править» или разветвлять код. 
// Именно поэтому в мире DOM-модели для установки отслеживателей используются метод element.addEventListener (что приводит к наличию кода в двух и более местах) и делегирование событий (для решения проблем производительности). 
// Делегирование событий означает, что отслеживание событий осуществляется в родительском узле, скажем в, содержащем множество кнопок, и для всех кнопок устанавливается один отслеживатель. С использованием делегирования событий выполняется следующее:

// 	<div id="parent">
//		<button id="ok">OK</button>
//		<button id = "cancel">Cancel</button>
//	</dib>
// <script>
	document.getElementById('parent').addEventListener('click', function(event){
		var button = even.target;
		// Выполнение разных действий на основе тогоб, какая из кнопок была нажата

		switch (button.id){
			case'ok':
				console.log('OK!');
				break;
			case 'cancel':
				console.log('Cancel');
				break;
			default:
				new Error('Непредвиденный идентификатор кнопки')
		};
	});		
// </script>

// Со своей работой этот код справляется, но у него имеются недостатки:

// 1)объявление отслеживателя находится далеко от компонента пользовательского интерфейса, что затрудняет поиск и отладку кода;
// 2)делегирование с неизменным использованием инструкции switch создает ненужный шаблонный код непосредственно перед переходом к реальным действиям (в данном случае к реакции на нажатие кнопки);
// 3)браузерная несовместимость (которая здесь не рассматривается) требует от этого кода более пространного решения.

// К сожалению, как только дело доходит до практического применения данного кода реальными пользователями, для его поддержки всеми браузерами требуется предпринять ряд дополнительных мер:

// 1)в дополнение к методу addEventListener требуется применение метода attachEvent ;
// 2)в самом начале кода отслеживателя требуется применение выражения var event = event || window.event; ;
// 3)требуется применение выражения var button = event.tar­get || event.srcElement; .

// Все эти необходимые и весьма неприятные нюансы в конечном итоге наводят на мысль о применении какой-нибудь библиотеки, связанной с обработкой событий. 
// Но зачем добавлять еще одну библиотеку (и изучать дополнительные API-интерфейсы), когда React поставляется в комплекте с решениями, избавляющими от всех неприятностей, связанных с обработкой событий?